function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("camera", "acquire_camera_focus")

	self.damageing = false
	self.health = 3
	self.dt = nill
	self.timer = 3
	self.ammo = 7
	self.moving = false
	self.firing = false
	self.deleting = false
	self.dir = vmath.vector3(0 , 0, 0)
	self.speed = 100
	self.input = vmath.vector3() 
end

function update(self, dt)
	self.dt = dt
	if self.health == 0 then
		msg.post("/camera#baturinsky_shake", "shake")
		msg.post("main_menu:/main#main", "start_main_menu")
		msg.post("#", "disable")
	end

	if self.damaging then
		msg.post("/camera#baturinsky_shake", "shake")
		self.health = self.health - 1
		self.damaging = false
	end
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end
	msg.post("/main#in_game", "update_ammo", { ammo = self.ammo })
	msg.post("/main#in_game", "update_health", { health = self.health })
	if self.firing and self.ammo >= 0 then
		local angle = math.atan2(self.dir.y , self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = {dir = self.dir}
		local pos = go.get_position()
		factory.create("#applefactory", vmath.vector3(pos.x + 10, pos.y + 10, pos.z), rot, props)
	end
	
	self.input.x = 0
	self.input.y = 0
	self.moving = false
	self.firing = false
end

function on_input(self, action_id, action)
	if action_id == hash("up") then 
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed and self.ammo > 0 then
		self.firing = true
		self.ammo = self.ammo - 1 
		self.timer = 3
	elseif action_id == hash("fire") and action.released then
		self.firing = false
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.vector3(self.input)
	end
end

function on_message(self, message_id, message, sender)
	self.object_id = msg.url(message.other_id)
	if message_id == hash("contact_point_response") then
		print(message.other_group)
		if message.other_group == hash("apple") then
			self.timer = self.timer - self.dt
			if self.timer < 2.7 then
				go.delete(self.object_id)
				self.ammo = self.ammo + 1
				self.timer = 3
			end
		elseif message.other_group == hash("wall") then
			go.set_position(go.get_position() + message.normal * message.distance)
		end
	elseif message_id == hash("collision_response") then
		if message.other_group == hash("trash") then
			self.damaging = true
			go.delete(self.object_id)
		end
	end
end